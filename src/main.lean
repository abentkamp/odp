import .induction_step data.set.basic .adversary

/- This file contains the main theorem. (Theorem 7) -/

open measure_theory ennreal database_type matrix
open_locale ennreal
open_locale matrix

local infix ` ^^ `:60 := Œª (Œº : measure_theory.measure _) (n : ‚Ñï),
  measure.pi (Œª i : fin n, Œº)

local infix ` ‚äó `:50  := measure.prod

/- `Œ©` is a sample space with a probability measure `P` on it. -/
variables {Œ© : Type} [measurable_space Œ©] {P : measure Œ©} [probability_measure P]

/- `Œ©‚Çê` is a sample space with an associated probability measure `P‚Çê`.
   They are used for randomization of the adversary's decisions. -/
variables (Œ©‚Çê : Type) [measurable_space Œ©‚Çê] (P‚Çê : measure Œ©‚Çê) [probability_measure P‚Çê]

/- `O` is the type of outputs of mechanisms. -/
variables {O : Type} [measurable_space O]

/- `X` is the type of databases. -/
variables {X : Type} [database_type X] [measurable_space X]

/-- Main Theorem for deterministic adversaries. The randomization `œâ‚Çê` of the
  adversary is fixed here.

  We use `P` as the probablity measure on sample space `Œ©` for each of the `n`
  mechanisms, and thus the product measure `P ^^ n` is the probability measure
  on the joint sample space.
-/
theorem odp_composition_theorem_det
  (ùíú : adversary P Œ©‚Çê O X) (œâ‚Çê : Œ©‚Çê) (Œµ Œ¥ : ‚Ñù‚â•0‚àû) (hŒµ : Œµ < ‚àû) (n : ‚Ñï) :
  let v bit := odp_composition ùíú n bit œâ‚Çê Œµ Œ¥ in
  ‚àÄ (s : set (fin n ‚Üí O)) (hs : measurable_set s),
    (P ^^ n) {œâ | v 0 œâ ‚àà s} ‚â§ exp Œµ * (P ^^ n) {œâ | v 1 œâ ‚àà s} + Œ¥ :=
begin
  show diff_private_composition (P ^^ n)
    (odp_composition ùíú n 0 œâ‚Çê Œµ Œ¥)
    (odp_composition ùíú n 1 œâ‚Çê Œµ Œ¥) Œµ Œ¥,
  induction n generalizing ùíú Œµ Œ¥,
  case zero : {
    intros s hs,
    by_cases h : s = set.univ,
    { simp only [h, set.mem_univ, set.set_of_true],
      refine le_trans _ _,
      exact Œµ.exp * ‚áë(measure.pi (Œª (i : fin 0), P)) set.univ,
      refine le_mul_of_one_le_left' _,
      apply one_le_exp,
      exact le_add_of_nonneg_right (zero_le _),
    },
    { simp [set.eq_empty_of_subsingleton_of_not_univ s h] }},
  case succ : n ih {
    have ih' : ‚àÄ (o‚ÇÅ : O), diff_private_composition (P ^^ n)
        (Œª œâ, odp_composition‚ÇÄ ùíú o‚ÇÅ n 0 œâ‚Çê Œµ Œ¥ œâ)
        (Œª œâ, odp_composition‚ÇÄ ùíú o‚ÇÅ n 1 œâ‚Çê Œµ Œ¥ œâ)
        (Œµ - Œµusage ((ùíú 0).choose œâ‚Çê ![] Œµ Œ¥).odp_partition o‚ÇÅ)
        (Œ¥ - ((ùíú 0).choose œâ‚Çê ![] Œµ Œ¥).odp_partition.Œ¥),
      { intro o,
        let ùíú_choice : adversary_choice P O X Œµ Œ¥ := (ùíú 0).choose œâ‚Çê ![] Œµ Œ¥,
        let  Œµ' : ‚Ñù‚â•0‚àû := Œµ - Œµusage ùíú_choice.odp_partition o,
        let  Œ¥' : ‚Ñù‚â•0‚àû := Œ¥ - ùíú_choice.odp_partition.Œ¥,
        let  ùíú' : adversary P Œ©‚Çê O X := inform ùíú o,
        have hŒµ' : Œµ' < ‚àû := lt_of_le_of_lt (ennreal.sub_le_self _ _) hŒµ,
        exact ih ùíú' Œµ' Œ¥' hŒµ' },
    have h_diff_private_composition_PPn : diff_private_composition (P ‚äó P ^^ n)
      (Œª œâ, odp_composition ùíú (n+1) 0 œâ‚Çê Œµ Œ¥ (vec_cons œâ.1 œâ.2))
      (Œª œâ, odp_composition ùíú (n+1) 1 œâ‚Çê Œµ Œ¥ (vec_cons œâ.1 œâ.2)) Œµ Œ¥,
    { have hM : ‚àÄ (x : X), measurable (((ùíú 0).choose œâ‚Çê ![] Œµ Œ¥).M x),
      { intro x,
        apply (ùíú 0).measurable_M measurable_const measurable_const measurable_const measurable_const measurable_const measurable_id },
      have h_ind_step : diff_private_composition (P ‚äó P ^^ n)
        (Œª œâ, let o := ((ùíú 0).choose œâ‚Çê ![] Œµ Œ¥).M (((ùíú 0).choose œâ‚Çê ![] Œµ Œ¥).x 0) œâ.1 in
              (o, odp_composition‚ÇÄ ùíú o n 0 œâ‚Çê Œµ Œ¥ œâ.2))
        (Œª œâ, let o := ((ùíú 0).choose œâ‚Çê ![] Œµ Œ¥).M (((ùíú 0).choose œâ‚Çê ![] Œµ Œ¥).x 1) œâ.1 in
              (o, odp_composition‚ÇÄ ùíú o n 1 œâ‚Çê Œµ Œ¥ œâ.2))
        Œµ Œ¥,
      { apply induction_step P (P ^^ n)
          (((ùíú 0).choose œâ‚Çê ![] Œµ Œ¥).x 0)
          (((ùíú 0).choose œâ‚Çê ![] Œµ Œ¥).x 1)
          ((ùíú 0).choose œâ‚Çê ![] Œµ Œ¥).hx (Œª x œâ, ((ùíú 0).choose œâ‚Çê ![] Œµ Œ¥).M x œâ)
          ((ùíú 0).choose œâ‚Çê ![] Œµ Œ¥).odp_partition hM
          (Œª o œâ, odp_composition‚ÇÄ ùíú o n 0 œâ‚Çê Œµ Œ¥ œâ)
          (Œª o œâ, odp_composition‚ÇÄ ùíú o n 1 œâ‚Çê Œµ Œ¥ œâ),
        exact measurable_odp_composition‚ÇÄ ùíú 0 œâ‚Çê _ _,
        exact measurable_odp_composition‚ÇÄ ùíú 1 œâ‚Çê _ _,
        exact hŒµ,
        exact ((ùíú 0).choose œâ‚Çê ![] Œµ Œ¥).hŒµ_for,
        exact ((ùíú 0).choose œâ‚Çê ![] Œµ Œ¥).hŒ¥,
        exact ih' },
      dunfold odp_composition,
      apply diff_private_composition_map_vec_head_vec_tail,
      convert h_ind_step,
      simp only [tail_cons, head_cons, odp_composition‚ÇÄ],
      simp [odp_composition‚ÇÄ],
    },
    show diff_private_composition (P ^^ (n+1))
      (odp_composition ùíú (n+1) 0 œâ‚Çê Œµ Œ¥)
      (odp_composition ùíú (n+1) 1 œâ‚Çê Œµ Œ¥) Œµ Œ¥,
    { simp only,
      rw [measure.pi_succ (Œª i, Œ©) (Œª i, P)],
      unfold diff_private_composition,
      intros s hs,
      rw [measure.map_apply, measure.map_apply],
      rw [set.preimage_set_of_eq, set.preimage_set_of_eq],
      revert s hs,
      exact h_diff_private_composition_PPn,
      exact measurable.fin_cons (measurable_fst) (measurable_snd),
      exact measurable_odp_composition_det ùíú 1 œâ‚Çê Œµ Œ¥ hs, --measurability
      exact measurable.fin_cons (measurable_fst) (measurable_snd),
      exact measurable_odp_composition_det ùíú 0 œâ‚Çê Œµ Œ¥ hs, --measurability
      apply_instance
   } }
end

/-- Main Theorem (Theorem 7): For every adversary `ùíú` and for every set of
  views `s` of `ùíú` returned by `odp_composition`, we have that `Pr(v‚Å∞ ‚àà s) ‚â§
  exp Œµ * Pr(v¬π ‚àà s) + Œ¥`.

  We use `P` as the probablity measure on sample space `Œ©` for each of the `n`
  mechanisms and `P‚Çê` as the probablity measure on sample space `Œ©‚Çê` for the
  adversary. So the joint probability measure is `P‚Çê ‚äó P ^^ n`.
-/
theorem odp_composition_theorem 
  (ùíú : adversary P Œ©‚Çê O X) (Œµ Œ¥ : ‚Ñù‚â•0‚àû) (hŒµ : Œµ < ‚àû) (n : ‚Ñï) :
  let v bit (œâ : Œ©‚Çê √ó (fin n ‚Üí Œ©)) := odp_composition ùíú n bit œâ.1 Œµ Œ¥ œâ.2 in
  ‚àÄ (s : set (fin n ‚Üí O)) (hs : measurable_set s),
    (P‚Çê ‚äó P ^^ n) {œâ | v 0 œâ ‚àà s} ‚â§ exp Œµ * (P‚Çê ‚äó P ^^ n) {œâ | v 1 œâ ‚àà s} + Œ¥ :=
begin
  have h_measurable_odp_composition : 
    ‚àÄ bit, measurable (Œª œâ : Œ©‚Çê √ó (fin n ‚Üí Œ©), odp_composition ùíú n bit œâ.fst Œµ Œ¥ œâ.snd),
  { intros, apply measurable_odp_composition_nondet },
  intros v s hs,
  convert lintegral_mono _,
  { rw measure.prod_apply,
    apply (h_measurable_odp_composition 0) hs },
  { rw measure.prod_apply, 
    rw ‚Üêlintegral_const_mul,
    convert (lintegral_add _ _).symm,
    { rw ‚Üê mul_one Œ¥,
      convert (lintegral_const Œ¥).symm,
      rw measure_univ },
    { apply measurable.const_mul,
      apply measurable_measure_prod_mk_left,
      apply (h_measurable_odp_composition 1) hs },
    { measurability },
    { apply measurable_measure_prod_mk_left,
      apply (h_measurable_odp_composition 1) hs },
    { apply (h_measurable_odp_composition 1) hs }, },
  intro œâ‚Çê,
  dsimp [v],
  exact odp_composition_theorem_det _ ùíú œâ‚Çê Œµ Œ¥ hŒµ n s hs,
end